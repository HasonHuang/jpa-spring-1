<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context.xsd">
     
     
     <!-- 连接池 配置说明
	jdbc-pool:
	#初始化连接: 连接池启动时创建的初始化连接数量
	initialSize=5
	
	#最大活动连接: 连接池在同一时间能够分配的最大活动连接的数量,如果设置为非正数则表示不限制
	maxActive=60
	
	#最大空闲连接: 连接池中容许保持空闲状态的最大连接数量, 超过的空闲连接将被释放, 如果设置为负数表示不限制
	maxIdle=10
	
	#最小空闲连接: 连接池中容许保持空闲状态的最小连接数量, 低于这个数量将创建新的连接, 如果设置为0则不创建.默认与initialSize相同
	minIdle=5
	
	# 最大等待时间: 当没有可用连接时, 连接池等待连接被归还的最大时间( 以毫秒计数), 超过时间则抛出异常, 如果设置为-1 表示无限等待单位毫秒
	maxWait=5000
	
	#是否对空闲连接进行校验，如果检测失败, 则连接将被从池中去除.注意: 设置为true 后如果要生效,validationQuery 参数必须设置为非空字符串
	testWhileIdle=true
	
	#SQL 查询, 用来验证从连接池取出的连接
	validationQuery=SELECT 1
	
	#校验查询超时时间以秒为单位
	validationQueryTimeout=10
	
	#避免过度验证，保证验证不超过这个频率——以毫秒为单位
	validationInterval=30000
	
	#空闲连接回收器执行间隔，单位毫秒
	timeBetweenEvictionRunsMillis=31000
	
	#空闲连接能够保持空闲的最小时间，单位毫秒，在这个区间不会被回收器回收
	minEvictableIdleTimeMillis=120000
	
	#空闲连接回收器的执行线程数
	numTestsPerEvictionRun=10
	
	#检查连接是否泄漏（一般是因为没有关闭连接）,如果他们超过了removeAbandonedTimout 的限制.如果设置为true, 连接被认为是被泄露并且可以被删除,
	removeAbandoned=true
	
	#连接多久没有释放则认为是泄漏线程
	removeAbandonedTimeout=180
	 -->
     
     
     <!-- 配置 自动扫描的包 -->
     <context:component-scan base-package="com.hason.jpastudy.jpa_spring_1" />

	<!-- 第一步：配置 数据源 -->
	<!-- 定义属性变量文件 -->
	<context:property-placeholder
		ignore-resource-not-found="true" location="classpath:application.properties" />
	<!-- 定义数据源 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<!-- 数据库连接 基本信息 -->
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 连接池 基本信息 -->
		<property name="maxActive" value="5" />
		<property name="maxIdle" value="3" />
		<property name="minIdle" value="1" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
	
	
	<!-- 第二步：配置 实体管理工厂 -->
	<!-- 配置EntityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置 JPA 提供商的适配器。可以通过内部 bean 的方式来配置 -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>
		<!-- 配置实体类所在的包 -->
		<property name="packagesToScan" value="com.hason.jpastudy.jpa_spring_1.entity" />
		<!-- 配置 JPA 的基本属性，例如 JPA 实现产品的属性 -->
		<property name="jpaProperties" >
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
	</bean>
	
	
	
	<!-- 第三步：配置 事务管理 -->
	<!-- 配置 JPA 使用的事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	
	<!-- 配置基于注解的事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>